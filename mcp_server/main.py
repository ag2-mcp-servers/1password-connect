# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T08:56:00+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer
from fastapi import Path
from pydantic import constr

from models import (
    ActivityGetResponse,
    ErrorResponse,
    File,
    FullItem,
    HealthGetResponse,
    Patch,
    Vault2,
    VaultsGetResponse,
    VaultsVaultUuidItemsGetResponse,
    VaultsVaultUuidItemsItemUuidFilesGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@1password.com',
        'name': '1Password Integrations',
        'url': 'https://support.1password.com/',
    },
    description='REST API interface for 1Password Connect.',
    title='1Password Connect',
    version='1.5.7',
    servers=[{'url': 'http://1password.local'}, {'url': 'http://localhost:8080/v1'}],
)


@app.get(
    '/activity',
    tags=['api_request_monitoring'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_api_activity(limit: Optional[int] = 50, offset: Optional[int] = 0):
    """
    Retrieve a list of API Requests that have been made.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/health', tags=['api_request_monitoring'])
def get_server_health():
    """
    Get state of the server and its dependencies.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/heartbeat', tags=['api_request_monitoring'])
def get_heartbeat():
    """
    Ping the server for liveness
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics',
    description=""" See Prometheus documentation for a complete data model. """,
    tags=['api_request_monitoring'],
)
def get_prometheus_metrics():
    """
    Query server for exposed Prometheus metrics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_vaults(filter: Optional[str] = None):
    """
    Get all Vaults
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults/{vaultUuid}',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_vault_by_id(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid')
):
    """
    Get Vault details and metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults/{vaultUuid}/items',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_vault_items(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid'),
    filter: Optional[str] = None,
):
    """
    Get all items for inside a Vault
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vaults/{vaultUuid}/items',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def create_vault_item(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid'),
    body: FullItem = None,
):
    """
    Create a new Item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/vaults/{vaultUuid}/items/{itemUuid}',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_vault_item(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid'),
    item_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='itemUuid'),
):
    """
    Delete an Item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults/{vaultUuid}/items/{itemUuid}',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_vault_item_by_id(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid'),
    item_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='itemUuid'),
):
    """
    Get the details of an Item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/vaults/{vaultUuid}/items/{itemUuid}',
    description=""" Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.

When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`
 """,
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def patch_vault_item(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid'),
    item_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='itemUuid'),
    body: Patch = None,
):
    """
    Update a subset of Item attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/vaults/{vaultUuid}/items/{itemUuid}',
    tags=['vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def update_vault_item(
    vault_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='vaultUuid'),
    item_uuid: constr(pattern=r'^[\da-z]{26}$') = Path(..., alias='itemUuid'),
    body: FullItem = None,
):
    """
    Update an Item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults/{vaultUuid}/items/{itemUuid}/files',
    tags=['vault_item_management', 'vault_file_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_item_files(
    vault_uuid: UUID = Path(..., alias='vaultUuid'),
    item_uuid: UUID = Path(..., alias='itemUuid'),
    inline_files: Optional[bool] = None,
):
    """
    Get all the files inside an Item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}',
    tags=['vault_file_management', 'vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_details_of_file_by_id(
    vault_uuid: UUID = Path(..., alias='vaultUuid'),
    item_uuid: UUID = Path(..., alias='itemUuid'),
    file_uuid: UUID = Path(..., alias='fileUuid'),
    inline_files: Optional[bool] = None,
):
    """
    Get the details of a File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content',
    tags=['vault_file_management', 'vault_item_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def download_file_by_i_d(
    vault_uuid: UUID = Path(..., alias='vaultUuid'),
    item_uuid: UUID = Path(..., alias='itemUuid'),
    file_uuid: str = Path(..., alias='fileUuid'),
):
    """
    Get the content of a File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
