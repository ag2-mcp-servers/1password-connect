# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T08:56:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel, conint, constr


class Action(Enum):
    READ = 'READ'
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'


class Actor(BaseModel):
    account: Optional[str] = None
    id: Optional[UUID] = None
    jti: Optional[str] = None
    requestIp: Optional[str] = None
    userAgent: Optional[str] = None


class Item(BaseModel):
    id: Optional[constr(pattern=r'^[\da-z]{26}$')] = None


class Type(Enum):
    ITEM = 'ITEM'
    VAULT = 'VAULT'


class Vault(BaseModel):
    id: Optional[constr(pattern=r'^[\da-z]{26}$')] = None


class Resource(BaseModel):
    item: Optional[Item] = None
    itemVersion: Optional[int] = None
    type: Optional[Type] = None
    vault: Optional[Vault] = None


class Result(Enum):
    SUCCESS = 'SUCCESS'
    DENY = 'DENY'


class APIRequest(BaseModel):
    action: Optional[Action] = None
    actor: Optional[Actor] = None
    requestId: Optional[UUID] = Field(
        None, description='The unique id used to identify a single request.'
    )
    resource: Optional[Resource] = None
    result: Optional[Result] = None
    timestamp: Optional[datetime] = Field(
        None, description='The time at which the request was processed by the server.'
    )


class ErrorResponse(BaseModel):
    message: Optional[str] = Field(None, description='A message detailing the error')
    status: Optional[int] = Field(None, description='HTTP Status Code')


class Purpose(Enum):
    field_ = ''
    USERNAME = 'USERNAME'
    PASSWORD = 'PASSWORD'
    NOTES = 'NOTES'


class Section(BaseModel):
    id: Optional[str] = None


class Type1(Enum):
    STRING = 'STRING'
    EMAIL = 'EMAIL'
    CONCEALED = 'CONCEALED'
    URL = 'URL'
    TOTP = 'TOTP'
    DATE = 'DATE'
    MONTH_YEAR = 'MONTH_YEAR'
    MENU = 'MENU'


class File(BaseModel):
    content: Optional[str] = Field(
        None,
        description='Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.',
    )
    content_path: Optional[str] = Field(
        None,
        description='Path of the Connect API that can be used to download the contents of this file.',
    )
    id: Optional[str] = Field(None, description='ID of the file')
    name: Optional[str] = Field(None, description='Name of the file')
    section: Optional[Section] = Field(
        None,
        description='For files that are in a section, this field describes the section.',
    )
    size: Optional[int] = Field(None, description='Size in bytes of the file')


class Section2(BaseModel):
    id: Optional[str] = None
    label: Optional[str] = None


class CharacterSet(Enum):
    LETTERS = 'LETTERS'
    DIGITS = 'DIGITS'
    SYMBOLS = 'SYMBOLS'


class GeneratorRecipe(BaseModel):
    characterSets: Optional[List[CharacterSet]] = Field(None, ge=0, le=3)
    excludeCharacters: Optional[str] = Field(
        None,
        description='List of all characters that should be excluded from generated passwords.',
        examples=['abc1'],
    )
    length: Optional[conint(ge=1, le=64)] = Field(
        32, description='Length of the generated value'
    )


class Category(Enum):
    LOGIN = 'LOGIN'
    PASSWORD = 'PASSWORD'
    API_CREDENTIAL = 'API_CREDENTIAL'
    SERVER = 'SERVER'
    DATABASE = 'DATABASE'
    CREDIT_CARD = 'CREDIT_CARD'
    MEMBERSHIP = 'MEMBERSHIP'
    PASSPORT = 'PASSPORT'
    SOFTWARE_LICENSE = 'SOFTWARE_LICENSE'
    OUTDOOR_LICENSE = 'OUTDOOR_LICENSE'
    SECURE_NOTE = 'SECURE_NOTE'
    WIRELESS_ROUTER = 'WIRELESS_ROUTER'
    BANK_ACCOUNT = 'BANK_ACCOUNT'
    DRIVER_LICENSE = 'DRIVER_LICENSE'
    IDENTITY = 'IDENTITY'
    REWARD_PROGRAM = 'REWARD_PROGRAM'
    DOCUMENT = 'DOCUMENT'
    EMAIL_ACCOUNT = 'EMAIL_ACCOUNT'
    SOCIAL_SECURITY_NUMBER = 'SOCIAL_SECURITY_NUMBER'
    MEDICAL_RECORD = 'MEDICAL_RECORD'
    SSH_KEY = 'SSH_KEY'
    CUSTOM = 'CUSTOM'


class State(Enum):
    ARCHIVED = 'ARCHIVED'
    DELETED = 'DELETED'


class Url(BaseModel):
    href: str
    label: Optional[str] = None
    primary: Optional[bool] = None


class Vault1(BaseModel):
    id: constr(pattern=r'^[\da-z]{26}$')


class ItemModel(BaseModel):
    category: Category
    createdAt: Optional[datetime] = None
    favorite: Optional[bool] = False
    id: Optional[constr(pattern=r'^[\da-z]{26}$')] = None
    lastEditedBy: Optional[str] = None
    state: Optional[State] = None
    tags: Optional[List[str]] = None
    title: Optional[str] = None
    updatedAt: Optional[datetime] = None
    urls: Optional[List[Url]] = Field(
        None,
        examples=[
            [
                {'href': 'https://example.com', 'primary': True},
                {'href': 'https://example.org'},
            ]
        ],
    )
    vault: Vault1
    version: Optional[int] = None


class Op(Enum):
    add = 'add'
    remove = 'remove'
    replace = 'replace'


class PatchItem(BaseModel):
    op: Op
    path: str = Field(
        ...,
        description='An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute',
        examples=['/fields/06gnn2b95example10q91512p5/label'],
    )
    value: Optional[Dict[str, Any]] = None


class Patch(RootModel[List[PatchItem]]):
    root: List[PatchItem]


class ServiceDependency(BaseModel):
    message: Optional[str] = Field(
        None, description='Human-readable message for explaining the current state.'
    )
    service: Optional[str] = None
    status: Optional[str] = None


class Type2(Enum):
    USER_CREATED = 'USER_CREATED'
    PERSONAL = 'PERSONAL'
    EVERYONE = 'EVERYONE'
    TRANSFER = 'TRANSFER'


class Vault2(BaseModel):
    attributeVersion: Optional[int] = Field(None, description='The vault version')
    contentVersion: Optional[int] = Field(
        None, description='The version of the vault contents'
    )
    createdAt: Optional[datetime] = None
    description: Optional[str] = None
    id: Optional[constr(pattern=r'^[\da-z]{26}$')] = None
    items: Optional[int] = Field(
        None, description='Number of active items in the vault'
    )
    name: Optional[str] = None
    type: Optional[Type2] = None
    updatedAt: Optional[datetime] = None


class ActivityGetResponse(RootModel[List[APIRequest]]):
    root: List[APIRequest]


class HealthGetResponse(BaseModel):
    dependencies: Optional[List[ServiceDependency]] = None
    name: str
    version: str = Field(..., description="The Connect server's version")


class VaultsGetResponse(RootModel[List[Vault2]]):
    root: List[Vault2]


class VaultsVaultUuidItemsGetResponse(RootModel[List[ItemModel]]):
    root: List[ItemModel]


class VaultsVaultUuidItemsItemUuidFilesGetResponse(RootModel[List[File]]):
    root: List[File]


class FieldModel(BaseModel):
    entropy: Optional[float] = Field(
        None,
        description='For fields with a purpose of `PASSWORD` this is the entropy of the value',
    )
    generate: Optional[bool] = Field(
        False,
        description='If value is not present then a new value should be generated for this field',
    )
    id: str
    label: Optional[str] = None
    purpose: Optional[Purpose] = Field(
        None,
        description='Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.',
    )
    recipe: Optional[GeneratorRecipe] = None
    section: Optional[Section] = None
    type: Type1
    value: Optional[str] = None


class FullItem(ItemModel):
    fields: Optional[List[FieldModel]] = None
    files: Optional[List[File]] = None
    sections: Optional[List[Section2]] = None
